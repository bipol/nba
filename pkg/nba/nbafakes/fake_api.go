// Code generated by counterfeiter. DO NOT EDIT.
package nbafakes

import (
	"net/http"
	"sync"

	"github.com/bipol/nba/pkg/nba"
)

type FakeAPI struct {
	GetLeagueLeadersStub        func(...func(*http.Request)) ([]nba.LeagueLeaderRow, error)
	getLeagueLeadersMutex       sync.RWMutex
	getLeagueLeadersArgsForCall []struct {
		arg1 []func(*http.Request)
	}
	getLeagueLeadersReturns struct {
		result1 []nba.LeagueLeaderRow
		result2 error
	}
	getLeagueLeadersReturnsOnCall map[int]struct {
		result1 []nba.LeagueLeaderRow
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) GetLeagueLeaders(arg1 ...func(*http.Request)) ([]nba.LeagueLeaderRow, error) {
	fake.getLeagueLeadersMutex.Lock()
	ret, specificReturn := fake.getLeagueLeadersReturnsOnCall[len(fake.getLeagueLeadersArgsForCall)]
	fake.getLeagueLeadersArgsForCall = append(fake.getLeagueLeadersArgsForCall, struct {
		arg1 []func(*http.Request)
	}{arg1})
	fake.recordInvocation("GetLeagueLeaders", []interface{}{arg1})
	fake.getLeagueLeadersMutex.Unlock()
	if fake.GetLeagueLeadersStub != nil {
		return fake.GetLeagueLeadersStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLeagueLeadersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) GetLeagueLeadersCallCount() int {
	fake.getLeagueLeadersMutex.RLock()
	defer fake.getLeagueLeadersMutex.RUnlock()
	return len(fake.getLeagueLeadersArgsForCall)
}

func (fake *FakeAPI) GetLeagueLeadersCalls(stub func(...func(*http.Request)) ([]nba.LeagueLeaderRow, error)) {
	fake.getLeagueLeadersMutex.Lock()
	defer fake.getLeagueLeadersMutex.Unlock()
	fake.GetLeagueLeadersStub = stub
}

func (fake *FakeAPI) GetLeagueLeadersArgsForCall(i int) []func(*http.Request) {
	fake.getLeagueLeadersMutex.RLock()
	defer fake.getLeagueLeadersMutex.RUnlock()
	argsForCall := fake.getLeagueLeadersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPI) GetLeagueLeadersReturns(result1 []nba.LeagueLeaderRow, result2 error) {
	fake.getLeagueLeadersMutex.Lock()
	defer fake.getLeagueLeadersMutex.Unlock()
	fake.GetLeagueLeadersStub = nil
	fake.getLeagueLeadersReturns = struct {
		result1 []nba.LeagueLeaderRow
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) GetLeagueLeadersReturnsOnCall(i int, result1 []nba.LeagueLeaderRow, result2 error) {
	fake.getLeagueLeadersMutex.Lock()
	defer fake.getLeagueLeadersMutex.Unlock()
	fake.GetLeagueLeadersStub = nil
	if fake.getLeagueLeadersReturnsOnCall == nil {
		fake.getLeagueLeadersReturnsOnCall = make(map[int]struct {
			result1 []nba.LeagueLeaderRow
			result2 error
		})
	}
	fake.getLeagueLeadersReturnsOnCall[i] = struct {
		result1 []nba.LeagueLeaderRow
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLeagueLeadersMutex.RLock()
	defer fake.getLeagueLeadersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nba.API = new(FakeAPI)
